import streamlit as st
import imaplib, email
from email.header import decode_header
import pandas as pd
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer

# --- summarizer ---
def summarize_text(text, sentences_count=2):
    parser = PlaintextParser.from_string(text, Tokenizer("english"))
    summarizer = LsaSummarizer()
    summary = summarizer(parser.document, sentences_count)
    return " ".join([str(s) for s in summary])

# --- fetch emails via IMAP + app password ---
def fetch_emails(user, app_password, limit=10):
    imap_host = "imap.gmail.com"
    mail = imaplib.IMAP4_SSL(imap_host)
    mail.login(user, app_password)
    mail.select("inbox")

    typ, data = mail.search(None, "ALL")
    mail_ids = data[0].split()
    emails = []

    for num in reversed(mail_ids[-limit:]):  # latest N emails
        typ, msg_data = mail.fetch(num, "(RFC822)")
        raw = msg_data[0][1]
        msg = email.message_from_bytes(raw)

        # --- subject ---
        subject, encoding = decode_header(msg.get("Subject", ""))[0]
        if isinstance(subject, bytes):
            subject = subject.decode(encoding or "utf-8", errors="ignore")

        # --- from ---
        from_ = msg.get("From", "")

        # --- body ---
        body = ""
        if msg.is_multipart():
            for part in msg.walk():
                if part.get_content_type() == "text/plain" and not part.get("Content-Disposition"):
                    try:
                        body = part.get_payload(decode=True).decode(errors="ignore")
                        break
                    except:
                        pass
        else:
            body = msg.get_payload(decode=True).decode(errors="ignore")

        # --- summary ---
        summary = summarize_text(body) if body else ""

        emails.append({
            "From": from_,
            "Subject": subject,
            "Body": body,
            "Summary": summary
        })

    mail.logout()
    return pd.DataFrame(emails)

# --- Streamlit UI ---
st.title("ðŸ“§ Gmail Inbox Scraper (App Password)")

with st.form("login_form"):
    user = st.text_input("Gmail Address")
    app_password = st.text_input("App Password (16 chars)", type="password")
    limit = st.number_input("Number of emails to fetch", min_value=1, max_value=50, value=5)
    submitted = st.form_submit_button("Fetch Emails")

if submitted:
    if not user or not app_password:
        st.error("Please enter Gmail and App Password")
    else:
        try:
            df = fetch_emails(user, app_password, limit)
            st.success(f"Fetched {len(df)} emails âœ…")
            st.dataframe(df[["From", "Subject", "Summary"]])

            # Download as CSV
            csv = df.to_csv(index=False).encode("utf-8")
            st.download_button("ðŸ’¾ Download CSV", csv, "emails.csv", "text/csv")
        except Exception as e:
            st.error(f"Error: {e}")